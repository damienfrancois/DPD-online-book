site_name: Defensive programming and debugging
site_description: Online book on defensive programming and debugging
site_author: Geert Jan Bex
nav:
    - Welcome: welcome.md
    - Preface:
        # - Introduction: Intro/intro_dpd.md
        - 'Motivation': Intro/economics_of_bugs.md
        - 'Scope': Intro/scope.md
        - 'Software environment': Intro/software.md
    - 'Taxonomy of bugs':
        - 'Introduction': Taxonomy/taxonomy_intro.md
        - 'Bugs in requirements': Taxonomy/requirements_bugs.md
        - 'Structural bugs': Taxonomy/structural_bugs.md
        - 'Arithmetic bugs': Taxonomy/arithmetic_bugs.md
        - 'Data races & deadlocks': Taxonomy/data_races_deadlocks.md
        - 'Bugs in data': Taxonomy/data_bugs.md
    - 'Writing good code':
        - 'Introduction': CodingBestPractices/coding_best_practices_intro.md
        - 'Coding style': CodingBestPractices/coding_best_practices.md
        - 'Error handling in Fortran': CodingBestPractices/ErrorHandling/error_handling_fortran.md
        - 'Error handling in C': CodingBestPractices/ErrorHandling/error_handling_c.md
        - 'Exceptions in C++': CodingBestPractices/ErrorHandling/error_handling_cpp.md
        # - Python: CodingBestPractices/ErrorHandling/error_handling_python.md
        - 'Assertions': CodingBestPractices/ErrorHandling/assertions.md
        # - 'Additional material': CodingBestPractices/coding_best_practices_more.md
          #     - Documentation:
          #         - Introduction: Documentation/documentation_intro.md
          #         - Best practices: Documentation/documentation_best_practices.md
          #         - API documentation:
          #             # - Fortran: Documentation/doxygen_fortran.md
          #             # - C/C++: Documentation/doxygen_c.md
          #             # - Python: Documentation/docstrings_sphinx.md
          #         - Application documentation: Documentation/mkdocs.md
          #         - Additional material: Documentation/documentation_more.md
          #     - Testing:
          #         # - Introduction: Testing/testing_intro.md
          #         - Unit testing:
          #             - Introduction: UnitTesting/unit_testing_intro.md
          #             - Best practices: UnitTesting/unit_testing_best_practices.md
          #             - pfUnit for Fortran: UnitTesting/pfunit_fortran.md
          #             - CUnit for C: UnitTesting/cunit_c.md
          #             # - Catch2 for C++: UnitTesting/catch2_cpp.md
          #             # - pytest for Python: UnitTesting/pytest_python.md
          #         - Functional testing:
          #             - Introduction: FunctionalTesting/functional_testing_intro.md
          #             - Best practices: FunctionalTesting/functional_testing_best_practices.md
          #             # - shunit2 for functional testing: FunctionalTesting/shunit.md
          #         - Code coverage:
          #             - Introduction: CodeCoverage/code_coverage_intro.md
          #             - Best practices: CodeCoverage/code_coverage_best_practices.md
          #         # - Continuous integration: Testing/continuous_integration.md
          #     - Code validation:
          #         # - Introduction: CodeValidation/code_validation_intro.md
          #         - Compiler flags for debugging:
          #             - Introduction: CodeValidation/Compilers/compiler_flags_intro.md
          #             # - Flags for gfortran: CodeValidation/Compilers/gfortran_flags.md
          #             - Flags for ifort: CodeValidation/Compilers/ifort_flags.md
          #             # - Flags for gcc/g++: CodeValidation/Compilers/gcc_flags.md
          #             - Flags for icc/icpc: CodeValidation/Compilers/icc_flags.md
          #             - GCC sanitizer: CodeValidation/Compilers/gcc_sanitizer.md
          #         - Static code analyzers:
          #             - Introduction: CodeValidation/StaticCodeAnalyzers/static_code_analyzers_intro.md
          #             # - CppCheck: CodeValidation/StaticCodeAnalyzers/cppcheck.md
          #             - Clang Tidy: CodeValidation/StaticCodeAnalyzers/clang_tidy.md
          #             # - Pylint & flake8: CodeValidation/StaticCodeAnalyzers/pylint_flake8.md
          #     - Finding bugs at runtime:
          #         - Introduction: BugsAtRuntime/finding_bugs_intro.md
          #         - Best practices: BugsAtRuntime/finding_bugs_best_practices.md
          #         - Reproducibility & Heisenbugs: BugsAtRuntime/heisenbugs.md
          #         - Best practices for parallel applications: BugsAtRuntime/parallel_debugging_best_practices.md
          #         - Debuggers:
          #             - GDB:
          #               - Features: BugsAtRuntime/Debuggers/Gdb/gdb_features.md
          #               - Attaching to a running process: BugsAtRuntime/Debuggers/Gdb/gdb_attach.md
          #               - Reverse debugging: BugsAtRuntime/Debuggers/Gdb/gdb_reverse_debugging.md
          #               - Debugging OpenMP applications: BugsAtRuntime/Debuggers/gdb_omp_debugging.md
          #             # - Eclipse debugger: BugsAtRuntime/Debuggers/Eclipse/eclipse.md
          #             # - Python pdb:
          #             - Arm DDT: BugsAtRuntime/Debuggers/ArmDdt/arm_ddt.md
          #         - Runtime verification:
          #             - Introduction: BugsAtRuntime/Verification/verification_intro.md
          #             # - Valgrind: BugsAtRuntime/Verification/valgrind.md
          #             # - Compiler instrumentation: BugsAtRuntime/Verification/compiler_instrumentation.md
          #             # - Intel Inspector: BugsAtRuntime/Verification/intel_inspector.md
          #             # - Intel Trace Collector and Analyzer: BugsAtRuntime/Verification/intel_itac.md
          #             # - MUST: BugsAtRuntime/Verification/must.md
          #         - Tracing: BugsAtRuntime/tracing.md
          #     - Appendices:
          #         - Rosetta stone: Appendices/rosetta_stone.md
          #         - Syntax versus semantics: Appendices/syntax_vs_semantics.md
theme: readthedocs
